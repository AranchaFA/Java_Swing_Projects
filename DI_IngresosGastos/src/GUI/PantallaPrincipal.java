/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controlador.LogicaNegocio;
import DTO.OperacionBancaria;
import Modelo.TableOperacionBancaria;
import java.awt.Color;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author aranx
 */
public class PantallaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        initComponents();
        jTable_tabla.setModel(new TableOperacionBancaria(LogicaNegocio.getListaOperaciones()));
        jLabel_balanceCantidad.setText(new DecimalFormat("#,##0.00€").format(0));
        // Asignamos al jTable un objeto sorter para poderla ordenar por sus campos
        TableRowSorter<TableOperacionBancaria> sorter = new TableRowSorter<>((TableOperacionBancaria) jTable_tabla.getModel());
        jTable_tabla.setRowSorter(sorter);
    }

    public JTable getjTable_tabla() {
        return jTable_tabla;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_tabla = new javax.swing.JTable();
        jLabel_balanceCartel = new javax.swing.JLabel();
        jLabel_balanceCantidad = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu_ver = new javax.swing.JMenu();
        jMenuItem_todo = new javax.swing.JMenuItem();
        jMenuItem_ingresos = new javax.swing.JMenuItem();
        jMenuItem_gastos = new javax.swing.JMenuItem();
        jMenu_operacion = new javax.swing.JMenu();
        jMenu_informe = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable_tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_tabla);

        jLabel_balanceCartel.setText("BALANCE TOTAL: ");

        jMenu_ver.setText("Ver");

        jMenuItem_todo.setText("Todo");
        jMenuItem_todo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_todoActionPerformed(evt);
            }
        });
        jMenu_ver.add(jMenuItem_todo);

        jMenuItem_ingresos.setText("Ingresos");
        jMenuItem_ingresos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ingresosActionPerformed(evt);
            }
        });
        jMenu_ver.add(jMenuItem_ingresos);

        jMenuItem_gastos.setText("Gastos");
        jMenuItem_gastos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_gastosActionPerformed(evt);
            }
        });
        jMenu_ver.add(jMenuItem_gastos);

        jMenuBar2.add(jMenu_ver);

        jMenu_operacion.setText("Operación");
        jMenu_operacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_operacionActionPerformed(evt);
            }
        });
        jMenuBar2.add(jMenu_operacion);

        jMenu_informe.setText("Informe");
        jMenu_informe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_informeActionPerformed(evt);
            }
        });
        jMenuBar2.add(jMenu_informe);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_balanceCartel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_balanceCantidad))
                    .addComponent(jScrollPane1))
                .addGap(106, 106, 106))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_balanceCartel)
                    .addComponent(jLabel_balanceCantidad))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu_operacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_operacionActionPerformed
        // evt.consume(); // El método consume() aparece como protected así que no lo puedo aplicar
        // Lo usaría para que no ejecute por defecto el evento asociado a tocar el botón del menú, que es desplegar las opciones
        // y que nos aparezca entonces la ventana 2 con el foco
        // VentanaSecundaria ventanaSecundaria = new VentanaSecundaria(this, rootPaneCheckingEnabled);
        // ventanaSecundaria.setVisible(true);
    }//GEN-LAST:event_jMenu_operacionActionPerformed

    private void jMenuItem_todoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_todoActionPerformed
        mostratTodo();
    }//GEN-LAST:event_jMenuItem_todoActionPerformed

    private void jMenuItem_ingresosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ingresosActionPerformed
        mostrarFiltrado(true);
    }//GEN-LAST:event_jMenuItem_ingresosActionPerformed

    private void jMenuItem_gastosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_gastosActionPerformed
        mostrarFiltrado(false);
    }//GEN-LAST:event_jMenuItem_gastosActionPerformed

    private void jMenu_informeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_informeActionPerformed

            // Obtenemos la lista a mostrar
            List<OperacionBancaria> listaOperaciones = new ArrayList<OperacionBancaria>();
            // La encapsulamos en el objeto adecuado
            JRDataSource dataSource = new JRBeanCollectionDataSource(listaOperaciones);
            //Creamos el map para los parÃ¡metros, en este caso va vacÃo.
            Map parametros = new HashMap();
            JasperPrint print= JasperFillManager.fillReport("jrxml/report1.jasper", parametros,dataSource);
            JasperExportManager.exportReportToPdfFile(print, "jrxml/report1.pdf");
        
    }//GEN-LAST:event_jMenu_informeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    public void refrescarTabla() {
        TableOperacionBancaria model = (TableOperacionBancaria) jTable_tabla.getModel();
        model.refrescar();
        jLabel_balanceCantidad.setText(model.balanceFormateado());
        if (model.balance() >= 0) {
            jLabel_balanceCantidad.setForeground(Color.green);
        } else {
            jLabel_balanceCantidad.setForeground(Color.red);
        }
    }

    public void mostrarFiltrado(boolean ingreso) {
        // Aplicamos un RowFilter a nuestro Sorter para que sólo deje pasar las filas cuyo importe sea negativo/positivo.

        // Sacamos el RowSorter que tiene nuestra jTable
        TableRowSorter rowSorter = (TableRowSorter) jTable_tabla.getRowSorter();

        // SI RETORNO COMO VALOR NUMÉRICO EL IMPORTE EN LA CLASE TABLEMODEL DISEÑADA POR MÍ
        /* 
        Le asignamos un RowFilter a nuestro TableRowSorter. 
        Existe uno, de tipo estático, ya predefinido en la clase RowFilter, para comparaciones numéricas pasamos como parámetro: 
        1) Tipo de comparación (mayor,menor,igual,distinto)
        2) Valor con el que se compara
        3) Campo o campos (columna/s de la tabla) que se someten a la comparación, si no ponemos nada se comparan todas
         */
        //RowFilter.ComparisonType tipoComparacion=ingreso?RowFilter.ComparisonType.AFTER:RowFilter.ComparisonType.BEFORE;
        //RowFilter rowFilter=RowFilter.numberFilter(tipoComparacion, 0, 2);
        // SI RETORNO COMO DECIMAL FORMAT EL IMPORTE EN LA CLASE TABLEMODEL DISEÑADA POR MÍ
        /* 
        Le asignamos un RowFilter a nuestro TableRowSorter. 
        Existe uno, de tipo estático, ya predefinido en la clase RowFilter, para comparaciones con expresiones regulares. Pasamos como parámetro: 
        1) Patrón de la expresión regular con la que se va a comparar
        2) Campo o campos (columna/s de la tabla) que se someten a la comparación, si no ponemos nada se comparan todas
         */
        String expRegular = ingreso ? "^[0-9]" : "^[-]";
        RowFilter rowFilter = RowFilter.regexFilter(expRegular, 2);
        rowSorter.setRowFilter(rowFilter);

        // Refrescamos la tabla, para que se reflejen los cambios
        refrescarTabla();
    }

    public void mostratTodo() {
        // Eliminamos el RowFilter que pueda tener asignado el RowSorter de nuestro jTable (lo ponemos a null).

        // Sacamos el RowSorter que tiene nuestra jTable
        TableRowSorter rowSorter = (TableRowSorter) jTable_tabla.getRowSorter();
        // Le asignamos un RowFilter nulo. 
        rowSorter.setRowFilter(null);
        // Refrescamos la tabla, para que se reflejen los cambios
        refrescarTabla();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_balanceCantidad;
    private javax.swing.JLabel jLabel_balanceCartel;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem_gastos;
    private javax.swing.JMenuItem jMenuItem_ingresos;
    private javax.swing.JMenuItem jMenuItem_todo;
    private javax.swing.JMenu jMenu_informe;
    private javax.swing.JMenu jMenu_operacion;
    private javax.swing.JMenu jMenu_ver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_tabla;
    // End of variables declaration//GEN-END:variables
}
